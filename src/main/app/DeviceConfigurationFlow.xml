<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jersey="http://www.mulesoft.org/schema/mule/jersey"
	xmlns:wmq="http://www.mulesoft.org/schema/mule/ee/wmq" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/jersey http://www.mulesoft.org/schema/mule/jersey/current/mule-jersey.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/wmq http://www.mulesoft.org/schema/mule/ee/wmq/current/mule-wmq-ee.xsd">
    <validation:config name="Validation_Configuration" doc:name="Validation Configuration"/>
    <file:file-to-string-transformer returnClass="java.lang.String" name="File_to_String" doc:name="File to String"/>
    <file:connector name="File" writeToDirectory="D:\opt\config" readFromDirectory="D:\opt\config" workDirectory="D:\opt\config" autoDelete="false" outputAppend="true" streaming="true" validateConnections="true" doc:name="File" serialiseObjects="true" outputPattern="deviceMapping.txt"/>
    <object-to-byte-array-transformer name="Object_to_Byte_Array" doc:name="Object to Byte Array" encoding="US-ASCII" mimeType="text/plain"/>
    <byte-array-to-serializable-transformer name="Byte_Array_to_Serializable" doc:name="Byte Array to Serializable" encoding="US-ASCII" mimeType="text/plain"/>
    <spring:beans>
        <spring:bean id="DeviceInformationTransformer" name="DeviceInformationTransformer" class="com.cognizant.transformer.RegisterDeviceToFileTransformer" scope="singleton"/>
        <spring:bean id="retrieveFileContent" name="RetrieveFileContent" class="com.cognizant.util.RetrieveFileContent" scope="singleton"/>
        <spring:bean class='com.cognizant.orchestration.resource.DeviceResource' id='deviceResource'></spring:bean>
     	<spring:bean class='com.cognizant.orchestration.swagger.bootstrap.Bootstrap' id='bootstrap' init-method='start' lazy-init='false' />
     	<spring:bean class='io.swagger.mule.ApiListingJSON' id='apiListingJSON' />
     	<spring:bean class='io.swagger.jaxrs.config.BeanConfig' id='swaggerConfig'>
	       	<spring:property name='resourcePackage' value='com.cognizant.orchestration.resource' />
	       	<spring:property name='version' value='1.0.0' />
	       	<spring:property name='host' value='localhost:8080' />
	       	<spring:property name='basePath' value='/service/swagger' />
	       	<spring:property name='scan' value='true' />
    	</spring:bean>
    </spring:beans>
<http:request-config basePath='service' doc:name='HTTP Request Configuration' host='localhost' name='HTTP_Request_Configuration_global' port='8080' />
<flow name="DeviceConfigurationFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/api/booking/device/info" allowedMethods="POST" doc:name="Registed Device Id">
            <http:response-builder statusCode="200"/>
            <http:error-response-builder statusCode="400" reasonPhrase="Bad Request"/>
        </http:listener>
        <choice doc:name="Validates Payload and Proceed Forward">
            <when expression="!(payload == null)">
                <json:json-to-object-transformer returnClass="com.cognizant.orchestration.dto.DeviceInformation" mapper-ref="objectMapper" doc:name="Create RegisterDeviceRequest"/>
                <file:outbound-endpoint path="${filePath}" outputPattern="deviceMapping.txt" responseTimeout="10000" doc:name="Store device id in file" connector-ref="File" disableTransportTransformer="true" encoding="US-ASCII" mimeType="text/plain"/>
                <dw:transform-message metadata:id="5430432f-c833-47ca-a88c-d29a4b3301f6" doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Device registered successfully",
	success: true
} as :object {
	class : "com.cognizant.dto.BaseResponse"
}]]></dw:set-payload>
                </dw:transform-message>
                
            </when>
            <otherwise>
                <scripting:transformer returnClass="com.cognizant.orchestration.exception.BookingApplException" doc:name="Throw Exception">
                    <scripting:script engine="Groovy"><![CDATA[throw new com.cognizant.orchestration.exception.BookingApplException("Please provide a valid input");]]></scripting:script>
                </scripting:transformer>
            </otherwise>
        </choice>
    </flow>
    <flow name="RetrieveDeviceDetailsFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/api/booking/device/info" allowedMethods="GET" doc:name="Retrieve Device Details">
            <http:error-response-builder statusCode="400" reasonPhrase="Bad Request"/>
        </http:listener>
        <validation:is-not-empty config-ref="Validation_Configuration" value="#[message.inboundProperties['http.query.params'].deviceId]" message="Please specify the Device Id" exceptionClass="com.cognizant.orchestration.exception.BookingApplException" doc:name="Check empty Device Id"/>
        <invoke name="RetrieveFileContent" object-ref="retrieveFileContent" method="getFileContent" methodArguments="${filePath}deviceMapping.txt" methodArgumentTypes="java.lang.String" doc:name="RetrieveFileContent"/>
        <set-session-variable variableName="deviceid" value="#[message.inboundProperties['http.query.params'].deviceId]" doc:name="Set Device Id in the Flow"/>
        <set-payload value="#[payload]" doc:name="Set Device Information Object as Payload"/>
        <logger message="Payload recvd from file #[payload.deviceId], in device Id variable #[deviceId]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Match Request Device Id with Stored Device Id">
            <when expression="deviceId == payload.deviceId">
                <dw:transform-message metadata:id="be996efb-6b4d-4b00-ac1d-1a259f6c716a" doc:name="Transform Message">
                    <dw:input-payload mimeType="application/java"/>
                    <dw:input-variable variableName="deviceId"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	deviceId: payload.deviceId,
	success: true
} as :object {
	class : "com.cognizant.orchestration.dto.RegisterDeviceResponse"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <scripting:transformer returnClass="com.cognizant.orchestration.exception.BookingApplException" doc:name="Throw Exception">
                    <scripting:script engine="Groovy"><![CDATA[throw new com.cognizant.orchestration.exception.BookingApplException("Please provide a valid input");]]></scripting:script>
                </scripting:transformer>
            </otherwise>
        </choice>
    </flow>

<flow name="swaggerconfigurationflow" initialState="started">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/swagger/*" metadata:id="db97f3e7-c045-40fe-8c49-9e7c41a71eed"
			doc:name="HTTP" />
        <echo-component doc:name="Echo"/>
		<choice doc:name="Choice">
			<when expression="!(payload == null)">
				<set-variable value="#[message.payload]" variableName="originalPayload"   doc:name="Variable"></set-variable>
							
			</when>
			<otherwise>
				<logger
					message="Payload recvd  #[message.inboundProperties['http.query.params'].deviceId]"
					level="INFO" doc:name="Logger" />

			</otherwise>
		</choice>
		<jersey:resources doc:name="REST">
			<component>
				<spring-object bean="apiListingJSON" />
			</component>
			<component>
				<spring-object bean="deviceResource" />

			</component>
		</jersey:resources>
		<choice doc:name="Choice">
			<when expression="!(payload == null)">
			<object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>
				<choice doc:name="Payload choice">
					<when
						expression="#[payload == 'DeviceConfigurationFlow' and originalPayload != null]">
						<set-payload value="#[ flowVars.originalPayload]" doc:name="Set Payload"></set-payload>
<set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
<remove-property propertyName="Content-Length"  doc:name="Property"/>
                        <echo-component doc:name="Echo"/>
							
							
                        <http:request config-ref="HTTP_Request_Configuration_global" path="/api/booking/device/info" method="POST"  source="#[payload]" target="#[payload]"  doc:name="Register Device">
                           
                           
                        </http:request>
                        <echo-component doc:name="Echo"/>
							
					</when>
					<when
						expression="#[payload == 'RetrieveDeviceDetailsFlow' and message.inboundProperties['http.query.params'].?deviceId != null]">
						<logger
							message="oei Payload recvd #[message.inboundProperties['http.query.params'].deviceId]"
							level="INFO" doc:name="Logger" />
	 <http:request config-ref="HTTP_Request_Configuration_global"
             path="/api/booking/device/info" method="GET" doc:name="Get Device Details" target="#[payload]">
                            <http:request-builder>
                                <http:query-param paramName="deviceId" value="#[message.inboundProperties['http.query.params'].deviceId]"/>
                            </http:request-builder>
                        </http:request>
                        
					</when>
					<otherwise>

						<logger message="Payload for swagger#[message.payloadAs(java.lang.String)]"
							level="INFO" doc:name="Logger" />

					</otherwise>

				</choice>
			</when>
			<otherwise>

				<logger message="No flows found" level="INFO"
					doc:name="Logger" />

			</otherwise>
		</choice>




	</flow>
	<flow name="swaggerUiFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/swagger/api-docs/*" doc:name="HTTP" />
		<http:static-resource-handler
			resourceBase="${app.home}/docs" defaultFile="index.html"
			doc:name="HTTP Static Resource Handler" />
	</flow>
</mule>